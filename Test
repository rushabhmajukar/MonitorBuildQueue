# ========== USER CONFIGURATION ==========
$collectionUrl = "http://your-server:8080/tfs/YourCollection"
$project = "YourProject"
$agentPoolId = 123  # Directly use your known pool ID

# Azure VM Info
$resourceGroupName = "YourResourceGroup"
$agentVMs = @("agent-vm-1", "agent-vm-2")  # List of VM names for agents

# DevOps Server Personal Access Token
$pat = "YOUR_PAT"

# Azure Service Principal Info
$clientId = "YOUR_CLIENT_ID"
$clientSecret = "YOUR_CLIENT_SECRET"
$tenantId = "YOUR_TENANT_ID"
$subscriptionId = "YOUR_SUBSCRIPTION_ID"

# ========== AUTHENTICATION ==========
$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$pat"))
$headers = @{ Authorization = "Basic $base64AuthInfo" }

# Login to Azure (for VM control)
az login --service-principal -u $clientId -p $clientSecret --tenant $tenantId | Out-Null
az account set --subscription $subscriptionId

# ========== FUNCTION: GET QUEUED BUILD COUNT ==========
function Get-QueuedBuildCount {
    $url = "$collectionUrl/$project/_apis/build/builds?statusFilter=notStarted,inProgress&api-version=5.1"
    $response = Invoke-RestMethod -Uri $url -Headers $headers -Method Get
    return $response.count
}

# ========== FUNCTION: GET OFFLINE AGENTS ==========
function Get-OfflineAgents {
    $url = "$collectionUrl/_apis/distributedtask/pools/$agentPoolId/agents?api-version=5.1"
    $response = Invoke-RestMethod -Uri $url -Headers $headers -Method Get
    return $response.value | Where-Object { $_.status -eq "offline" }
}

# ========== FUNCTION: GET ONLINE AGENTS ==========
function Get-OnlineAgents {
    $url = "$collectionUrl/_apis/distributedtask/pools/$agentPoolId/agents?api-version=5.1"
    $response = Invoke-RestMethod -Uri $url -Headers $headers -Method Get
    return $response.value | Where-Object { $_.status -eq "online" }
}

# ========== MAIN LOGIC ==========
$queuedBuilds = Get-QueuedBuildCount
Write-Host "Queued Builds: $queuedBuilds"

if ($queuedBuilds -gt 0) {
    # Start offline agent VMs
    $offlineAgents = Get-OfflineAgents
    foreach ($agent in $offlineAgents) {
        $vmName = $agentVMs | Where-Object { $agent.name -like "*$_*" }
        if ($vmName) {
            Write-Host "Starting VM: $vmName"
            az vm start --resource-group $resourceGroupName --name $vmName | Out-Null
        }
    }
} else {
    # Stop online agent VMs if no builds are queued
    $onlineAgents = Get-OnlineAgents
    foreach ($agent in $onlineAgents) {
        $vmName = $agentVMs | Where-Object { $agent.name -like "*$_*" }
        if ($vmName) {
            Write-Host "Stopping VM: $vmName"
            az vm deallocate --resource-group $resourceGroupName --name $vmName | Out-Null
        }
    }
}
